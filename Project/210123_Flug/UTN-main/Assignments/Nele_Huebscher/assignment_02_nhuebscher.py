# -*- coding: utf-8 -*-
"""02_Assignment_Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wbWutsddomMKATYdI565fc3gsQDd8R9A

# Assignment 02
### Unfortunately, I was sick for quite some time, sorry for handing in this so late!

##### Python Basics II

This tutorial was written by Terry Ruas (University of Göttingen); The references for external contributors for which this material was anyhow adapted/inspired are in the Acknowledgments section (end of the document).

This notebook will cover the following tasks:

1. String Length
2. Largest List Element
3. Character Frequency
4. Sorted List of Tuples
5. Check Brackets
6. Check Brackets II
7. Queue
8. Unlimited Power
9. Unlimited Power II

## Task 01 – String Length
Write a program that reads in a string and prints the length of the input string. Do not use any built-in functions of Python, such as len().
For example, if the input is “Computer Science”, the output should be length: 16.
"""

# function returning the length of a given word (without using len())
def strLen (word):
# using a loop to get the last index of the list
    x = 0
    for a in word:
      x = x+1
    return x

yourWord = input()
print('length: ' + str(strLen(yourWord)))

"""## Task 02 – Largest List Element
Write a program that generates a list of 10 random integers between 1 and 100 and then finds and prints the largest element in the list. Do not use the built-in function max().
For example, if the input is [23,3,42,29,12,15,8,4,37,34], the output should be the largest element: 42.

Hint: Check out the module [random](https://docs.python.org/3.7/library/random.html).
"""

import random


# function returning the largest element in a list
def maxElementList (nums):
  # take first element as largest and compare to every element in list
  max = nums[0]
  for i in nums:
    if max < i:
        max = i

  return max

# use random to create a list
nums = [random.randint(1, 100) for x in range (10)]
print('largest element: ' + str(maxElementList(nums)))

"""## Task 03 – Character Frequency
Write a program that:
* Reads in a string and removes any spaces from the string
* Counts how often individual characters occur in the string
* Stores the information on character occurrence frequency in a dictionary
* Prints the dictionary.

For example, if the input is “santa claus”, the output should be:
{'s': 2, 'a': 3, 'n': 1, 't': 1, 'c': 1, 'l': 1, 'u': 1}.
"""

# function that reads in a String, removes the spaces and counts how often each letter is in a word, returning a set
def letterCount (word):
    # removing spaces
    word = word.replace(" ", "")
    letters = {}
    # add value for each letter in dict, counting the letters
    for x in word:
    # check whether letter already in dictionary, else insert new
       if (x in letters):
           letters [x] = letters [x] + 1
       else:
           letters [x] = 1

    return letters

yourWord = input ()
print(letterCount(yourWord))

"""## Task 04 – Sorted List of Tuples
Write a program that:
* Generates a list of 10 tuples, each tuple consisting of 3 random integers between 1 and 100
* Sorts the list of tuples in increasing order of the third element in each tuple
* Prints the sorted list of tuples

For example, if the generated input list is: [(56, 77, 69), (43, 30, 38), (2, 77, 101), (93, 57, 4), (74, 21, 77), (39, 68, 68), (65, 53, 96), (16, 29, 88), (88, 70, 38)]
The output should be: [(93, 57, 4), (43, 30, 38), (88, 70, 38), (39, 68, 68), (56, 77, 69), (74, 21, 77), (16, 29, 88), (65, 53, 96), (2, 77, 101)]

Hint: You are allowed and encouraged to use built-in functions, such as [sorted()](https://docs.python.org/3.7/library/functions.html?highlight=sorted#sorted), for this task.
"""

import random

# function that generates a List of 10 tuples with 3 random numbers in range 
# 1-100 and sorts them in increasing order of the third element in each tuple
def sortTupleList ():
    # create list of tuples
    tupleList = [(random.randint(1, 100), random.randint(1, 100), random.randint(1, 100) ) for x in range(10)]
    # sort them
    tupleList = sorted(tupleList, key=lambda tuple: tuple[2])

    return tupleList

print(sortTupleList())

"""## Task 05 – Check Brackets
Write a program that reads in a string, which is supposed to be a mathematical expression. Focus on brackets only and check whether left and right brackets are composed correctly. Ignore all other characters (i.e. you don’t have to check correctness of operators and operands).
Examples of correct input:
* 3*(2+5)
* ((()())())
* (3+)(((4)))
* Empty string

Examples of incorrect input:
* (3*(2+5)
* ((()())(())
* (3+)((4)))
* ())(()

"""

# function that checks whether the brackets are right in a given input
def checkBrackets (yourInput):
    # if every bracket set has an open and a closed bracket, if an error is detected, return
    # add every bracket to the list and remove if the bracket is closed
    x = []
    for a in yourInput:
        if (a == '('):
            x.append(a)
        # if x is not empty, meaning there is a bracket left to close
        elif (x and a == ')'):
            x.pop()
            
    if (x):
        return False

    return True

yourInput = input()
print(checkBrackets(yourInput))

"""## Task 06 – Check Brackets II
Extend previous program, so it can handle also square and curly brackets. Note that expressions in brackets cannot overlap. So, expression ```{[()()]([[]])}{}``` is correct, but expression ```([)]``` is not.
"""

# function that checks whether the brackets are right in a given input
def checkBracketsExtreme (yourInput):
    # if every bracket set has an open and a closed bracket, if an error is detected, return
    # add every bracket to the list and remove if the bracket is closed
    x = []
    for a in yourInput:
        if (a == '(' or a == '[' or a == '{'):
            x.append(a)
        # if x is not empty, meaning there is a bracket left to close
        elif (x  and a == ')' or a == ']' or a == '}'):
            y = x.pop()
            # if the bracket does not actually close the right bracket
            if (x and not (y == '(' and a == ')' or y == '[' and a == ']' or y == '{' and a == '}')):
                return False
    if (x):
        return False

    return True

yourInput = input()
print(checkBracketsExtreme(yourInput))

"""## Task 07 – Queue
Write a program that simulates a queue. It will read strings from the input. Consider these inputs as names of people coming to the end of a queue. Whenever “next” is given as input, the program will print out the name on the turn. The program finishes as soon as the queue is empty.
"""

# Queue can be simulated with a list, switching the index and moving to the last index, terminating when the last index was printed out

"""## Task 08 – Unlimited Power
Write a function with two arguments – $x$ and $n$. The function returns the value of $x^n$. Use [recursion](https://realpython.com/python-thinking-recursively/#recursive-data-structures-in-python).
"""

# function calculation pow (x,n) using recursion
def pow (x,n):
    if n > 0:
        return x * pow(x,n-1)
    else:
        return 1

"""## Task 09 – Unlimited Power II
Using function for factorial and function $x^n$ from previous task, write a program that reads value of $x$ and prints approximate value of $e^x$. Use this formula (Taylor series) for calculation
$$ e^x = 1 + x + \frac{x^2}{2!} + \frac{x^3}{3!} + ... + \frac{x^n}{n!} $$

To get precise value of $e^x$, the series would have to be infinite. Suppose that there is some required accuracy, so the calculation finishes as soon as the value of the next element is smaller than given threshold (e.g., 0.000001).
"""

# function powE 
def powE (sumE,n):
    sumE = sumE + math.pow(x, n + 1) / math.factorial (n + 1)
    if math.pow(x, n + 1) / math.factorial (n + 1) < 0.000001:
        return sumE
    else:
        return powE(sumE,n+1)
x = int(input())
print(powE((1 + x), 1))

"""## Acknowledgements

Redmond, Hsu, Saini, Gupta, Ramsey, Kondrich, Capoor, Cohen, Borus, Kincaid, Malik, and many others. - Stanford CS41
"""

